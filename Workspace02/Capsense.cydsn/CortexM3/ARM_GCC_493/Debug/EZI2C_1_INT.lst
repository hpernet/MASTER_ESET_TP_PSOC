ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"EZI2C_1_INT.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.EZI2C_1_ISR,"ax",%progbits
  19              		.align	2
  20              		.global	EZI2C_1_ISR
  21              		.thumb
  22              		.thumb_func
  23              		.type	EZI2C_1_ISR, %function
  24              	EZI2C_1_ISR:
  25              	.LFB0:
  26              		.file 1 ".\\Generated_Source\\PSoC5\\EZI2C_1_INT.c"
   1:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * File Name: EZI2C_1INT.c
   3:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * Version 2.0
   4:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
   5:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * Description:
   6:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  This file contains the code that operates during the interrupt service
   7:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  routine.  For this component, most of the runtime code is located in
   8:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  the ISR.
   9:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  10:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *******************************************************************************
  11:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * the software package with which this file was provided.
  15:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *******************************************************************************/
  16:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
  17:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** #include "EZI2C_1_PVT.h"
  18:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** #include "cyapicallbacks.h"
  19:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
  20:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
  21:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** /*******************************************************************************
  22:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * Function Name: EZI2C_1_ISR
  23:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** ********************************************************************************
  24:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  25:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * Summary:
  26:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  Handle Interrupt Service Routine.
  27:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  28:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * Parameters:
  29:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  EZI2C_1_dataPtrS1 - The global variable which stores the pointer to the
  30:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  data exposed to an I2C master for the first slave address.
  31:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 2


  32:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  EZI2C_1_rwOffsetS1 - The global variable which stores an offset for read
  33:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  and write operations, is set at each write sequence of the first slave
  34:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  address.
  35:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  36:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  EZI2C_1_rwIndexS1: global variable, which stores pointer to the next
  37:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  value to be read or written for the first slave address.
  38:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  39:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * EZI2C_1_wrProtectS1 - The global variable which stores an offset where data
  40:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  is read only for the first slave address.
  41:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  42:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * EZI2C_1_bufSizeS1 - The global variable which stores the size of a data array
  43:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  exposed to the I2C master for the first slave address.
  44:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  45:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  EZI2C_1_dataPtrS2 - The global variable which stores a pointer to the
  46:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  data exposed to the I2C master for the second slave address.
  47:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  48:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  EZI2C_1_rwOffsetS2 - The global variable which stores an offset for read
  49:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  and write operations, is set at each write sequence of the second slave
  50:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  device.
  51:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  52:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  EZI2C_1_rwIndexS2 - The global variable which stores a pointer to the next
  53:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  value to be read or written for the second slave address.
  54:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  55:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * EZI2C_1_wrProtectS2 - The global variable which stores an offset where data
  56:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  is "Read only" for the second slave address.  ??
  57:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  58:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * EZI2C_1_bufSizeS2 - The global variable which stores the size of a data array
  59:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  exposed to the I2C master for the second slave address.
  60:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  61:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * EZI2C_1_curState - The global variable which stores a current state of an
  62:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  I2C state machine.
  63:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  64:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  EZI2C_1_curStatus - The global variable which stores the current status of
  65:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  the component.
  66:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  67:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** * Return:
  68:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  EZI2C_1_rwOffsetS1 - The global variable which stores an offset for read
  69:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  and write operations, is set at each write sequence of the first slave
  70:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  address and is reset if a received slave address matches the first slave address
  71:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  and a next operation will be read.
  72:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  73:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  EZI2C_1_rwIndexS1 - The global variable which stores a pointer to the next
  74:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  value to be read or written for the first slave address. Is set to
  75:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  EZI2C_1_rwOffsetS1 and than incremented if a received slave address
  76:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  matches the first slave address and a next operation will be read.
  77:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  78:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  EZI2C_1_rwOffsetS2 - The global variable which stores an offset for read
  79:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  and write operations, is set at each write sequence of the second slave
  80:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  address. This variable changes if a new sub-address is passed to the slave.
  81:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  82:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  EZI2C_1_rwIndexS2 - The global variable which stores a pointer to the next
  83:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  value to be read or written for the second slave address. This variable
  84:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *  changes if a new sub-address is passed to the slave.
  85:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *
  86:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** *******************************************************************************/
  87:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** CY_ISR(EZI2C_1_ISR)
  88:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** {
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 3


  27              		.loc 1 88 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  89:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     static uint8  tmp8;
  90:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     static uint8  tmpCsr;
  91:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
  92:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** #if (EZI2C_1_SUBADDR_WIDTH == EZI2C_1_SUBADDR_16BIT)
  93:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     static uint16 tmp16;
  94:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** #endif /* (EZI2C_1_SUBADDR_WIDTH == EZI2C_1_SUBADDR_16BIT) */
  95:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
  96:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** #ifdef EZI2C_1_ISR_ENTRY_CALLBACK
  97:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     EZI2C_1_ISR_EntryCallback();
  98:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** #endif /* EZI2C_1_ISR_ENTRY_CALLBACK */
  99:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     
 100:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     /* Entry from interrupt
 101:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     *  In the hardware address compare mode, we can assume we only get interrupted
 102:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     *  when a valid address is recognized. In the software address compare mode,
 103:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     *  we have to check every address after a start condition.
 104:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     */
 105:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 106:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     /* Make copy to check Stop condition after bus has been released */
 107:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     tmpCsr = EZI2C_1_CSR_REG;
  32              		.loc 1 107 0
  33 0000 6F4B     		ldr	r3, .L16
  34 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  35 0004 DBB2     		uxtb	r3, r3
  36 0006 6F4A     		ldr	r2, .L16+4
  37 0008 1370     		strb	r3, [r2]
 108:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 109:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     /* Check for address phase of the transaction */
 110:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     if (EZI2C_1_IS_BIT_SET(tmpCsr, EZI2C_1_CSR_ADDRESS))
  38              		.loc 1 110 0
  39 000a 13F0080F 		tst	r3, #8
  40 000e 32D0     		beq	.L2
 111:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     {
 112:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****         #if (EZI2C_1_ADDRESSES == EZI2C_1_TWO_ADDRESSES)
 113:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 114:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             /* Get slave address from data register */
 115:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             tmp8 = ((EZI2C_1_DATA_REG >> EZI2C_1_ADDRESS_SHIFT) & EZI2C_1_SADDR_MASK);
 116:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 117:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             if (tmp8 == EZI2C_1_addrS1)   /* Check for address 1  */
 118:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             {
 119:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 if (EZI2C_1_IS_BIT_SET(EZI2C_1_DATA_REG, EZI2C_1_READ_FLAG))
 120:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 {  /* Prepare next read op, get data and place in register */
 121:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 122:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Load first data byte  */
 123:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_DATA_REG = EZI2C_1_dataPtrS1[EZI2C_1_rwOffsetS1];
 124:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 125:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* ACK and transmit */
 126:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_CSR_REG = (EZI2C_1_CSR_ACK | EZI2C_1_CSR_TRANSMIT);
 127:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 128:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Set index to offset */
 129:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_rwIndexS1 = EZI2C_1_rwOffsetS1;
 130:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 131:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Advance to data location */
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 4


 132:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     ++EZI2C_1_rwIndexS1;
 133:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 134:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Set Read busy status */
 135:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_curStatus |= EZI2C_1_STATUS_RD1BUSY;
 136:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 137:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Prepare for read transaction */
 138:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_curState = EZI2C_1_SM_DEV1_RD_DATA;
 139:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 }
 140:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 else  /* Start of a Write transaction, reset pointers, first byte is address */
 141:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 {  /* Prepare next operation to write offset */
 142:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 143:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* ACK and ready to receive sub address */
 144:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_CSR_REG = EZI2C_1_CSR_ACK;
 145:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 146:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Set Write busy status */
 147:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_curStatus |= EZI2C_1_STATUS_WR1BUSY;
 148:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 149:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Prepare for read transaction */
 150:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_curState = EZI2C_1_SM_DEV1_WR_ADDR;
 151:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 152:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Stop Interrupt Enable */
 153:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_CFG_REG  |= EZI2C_1_CFG_STOP_IE;
 154:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 155:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 }  /* Prepared for next Write transaction */
 156:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             }   /* Slave address #1 is processed */
 157:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             else if (tmp8 == EZI2C_1_addrS2)   /* Check for address 2  */
 158:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             {
 159:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 if (EZI2C_1_IS_BIT_SET(EZI2C_1_DATA_REG, EZI2C_1_READ_FLAG))
 160:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 {  /* Prepare next read op, get data and place in register */
 161:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 162:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Load first data byte  */
 163:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_DATA_REG = EZI2C_1_dataPtrS2[EZI2C_1_rwOffsetS2];
 164:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 165:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* ACK and transmit */
 166:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_CSR_REG = (EZI2C_1_CSR_ACK | EZI2C_1_CSR_TRANSMIT);
 167:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 168:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Reset pointer to previous offset */
 169:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_rwIndexS2 = EZI2C_1_rwOffsetS2;
 170:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 171:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Advance to data location */
 172:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     ++EZI2C_1_rwIndexS2;
 173:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 174:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Set read busy status */
 175:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_curStatus |= EZI2C_1_STATUS_RD2BUSY;
 176:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 177:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Prepare for read transaction */
 178:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_curState = EZI2C_1_SM_DEV2_RD_DATA;
 179:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 180:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 }  /* Prepared for next Read transaction */
 181:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 else  /* Start of write transfer, reset ptrs, 1st byte is address */
 182:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 {  /* Prepare next operation to write offset */
 183:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 184:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* ACK and ready to receive address */
 185:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_CSR_REG = EZI2C_1_CSR_ACK;
 186:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 187:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Set Write busy status */
 188:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_curStatus |= EZI2C_1_STATUS_WR2BUSY;
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 5


 189:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 190:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Prepare for read transaction */
 191:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_curState = EZI2C_1_SM_DEV2_WR_ADDR;
 192:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 193:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Enable interrupt on Stop */
 194:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_CFG_REG  |= EZI2C_1_CFG_STOP_IE;
 195:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 } /* Prepared for the next Write transaction */
 196:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             }
 197:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             else   /* No address match */
 198:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             {   /* NAK address Match  */
 199:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 EZI2C_1_CSR_REG = EZI2C_1_CSR_NAK;
 200:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             }
 201:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****         #else /* One slave address - hardware address matching */
 202:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 203:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             if (EZI2C_1_IS_BIT_SET(EZI2C_1_DATA_REG, EZI2C_1_READ_FLAG))
  41              		.loc 1 203 0
  42 0010 6D4B     		ldr	r3, .L16+8
  43 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  44 0014 13F0010F 		tst	r3, #1
  45 0018 1CD0     		beq	.L3
 204:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             {   /* Prepare next read op, get data and place in register */
 205:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 206:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Load first data byte  */
 207:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 EZI2C_1_DATA_REG = EZI2C_1_dataPtrS1[EZI2C_1_rwOffsetS1];
  46              		.loc 1 207 0
  47 001a 6C4A     		ldr	r2, .L16+12
  48 001c 1388     		ldrh	r3, [r2]
  49 001e 9BB2     		uxth	r3, r3
  50 0020 6B49     		ldr	r1, .L16+16
  51 0022 0968     		ldr	r1, [r1]
  52 0024 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
  53 0026 DBB2     		uxtb	r3, r3
  54 0028 6749     		ldr	r1, .L16+8
  55 002a 0B70     		strb	r3, [r1]
 208:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 209:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* ACK and transmit */
 210:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 EZI2C_1_CSR_REG = (EZI2C_1_CSR_ACK | EZI2C_1_CSR_TRANSMIT);
  56              		.loc 1 210 0
  57 002c 1421     		movs	r1, #20
  58 002e 644B     		ldr	r3, .L16
  59 0030 1970     		strb	r1, [r3]
 211:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 212:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Reset pointer to previous offset */
 213:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 EZI2C_1_rwIndexS1 = EZI2C_1_rwOffsetS1;
  60              		.loc 1 213 0
  61 0032 1388     		ldrh	r3, [r2]
  62 0034 9BB2     		uxth	r3, r3
  63 0036 674A     		ldr	r2, .L16+20
  64 0038 1380     		strh	r3, [r2]	@ movhi
 214:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 215:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Advance to data location */
 216:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 ++EZI2C_1_rwIndexS1;
  65              		.loc 1 216 0
  66 003a 1388     		ldrh	r3, [r2]
  67 003c 0133     		adds	r3, r3, #1
  68 003e 9BB2     		uxth	r3, r3
  69 0040 1380     		strh	r3, [r2]	@ movhi
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 6


 217:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 218:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Set read busy status */
 219:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 EZI2C_1_curStatus |= EZI2C_1_STATUS_RD1BUSY;
  70              		.loc 1 219 0
  71 0042 654A     		ldr	r2, .L16+24
  72 0044 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  73 0046 43F01103 		orr	r3, r3, #17
  74 004a 1370     		strb	r3, [r2]
 220:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 221:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Prepare for read transaction */
 222:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 EZI2C_1_curState = EZI2C_1_SM_DEV1_RD_DATA;
  75              		.loc 1 222 0
  76 004c 0822     		movs	r2, #8
  77 004e 634B     		ldr	r3, .L16+28
  78 0050 1A70     		strb	r2, [r3]
  79 0052 A1E0     		b	.L4
  80              	.L3:
 223:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             }
 224:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             else  /* Start of write transfer, reset ptrs, 1st byte is address */
 225:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             {   /* Prepare next operation to write offset */
 226:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 227:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* ACK and ready to receive address */
 228:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 EZI2C_1_CSR_REG = EZI2C_1_CSR_ACK;
  81              		.loc 1 228 0
  82 0054 1022     		movs	r2, #16
  83 0056 5A4B     		ldr	r3, .L16
  84 0058 1A70     		strb	r2, [r3]
 229:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 230:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Set Write activity */
 231:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 EZI2C_1_curStatus |= EZI2C_1_STATUS_WR1BUSY;
  85              		.loc 1 231 0
  86 005a 5F4A     		ldr	r2, .L16+24
  87 005c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  88 005e 43F01203 		orr	r3, r3, #18
  89 0062 1370     		strb	r3, [r2]
 232:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 233:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Prepare for read transaction */
 234:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 EZI2C_1_curState = EZI2C_1_SM_DEV1_WR_ADDR;
  90              		.loc 1 234 0
  91 0064 0122     		movs	r2, #1
  92 0066 5D4B     		ldr	r3, .L16+28
  93 0068 1A70     		strb	r2, [r3]
 235:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 236:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Enable interrupt on stop */
 237:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 EZI2C_1_CFG_REG |= EZI2C_1_CFG_STOP_IE;
  94              		.loc 1 237 0
  95 006a 5D4A     		ldr	r2, .L16+32
  96 006c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  97 006e 43F01003 		orr	r3, r3, #16
  98 0072 1370     		strb	r3, [r2]
  99 0074 90E0     		b	.L4
 100              	.L2:
 238:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             }
 239:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****         #endif  /* (EZI2C_1_ADDRESSES == EZI2C_1_TWO_ADDRESSES) */
 240:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     }
 241:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     else if (EZI2C_1_IS_BIT_SET(tmpCsr, EZI2C_1_CSR_BYTE_COMPLETE))
 101              		.loc 1 241 0
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 7


 102 0076 13F0010F 		tst	r3, #1
 103 007a 00F08D80 		beq	.L4
 242:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     {   /* Check for data transfer */
 243:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 244:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****         /* Data transfer state machine */
 245:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****         switch (EZI2C_1_curState)
 104              		.loc 1 245 0
 105 007e 574A     		ldr	r2, .L16+28
 106 0080 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 107 0082 013A     		subs	r2, r2, #1
 108 0084 072A     		cmp	r2, #7
 109 0086 7ED8     		bhi	.L5
 110 0088 DFE802F0 		tbb	[pc, r2]
 111              	.L7:
 112 008c 04       		.byte	(.L6-.L7)/2
 113 008d 0F       		.byte	(.L8-.L7)/2
 114 008e 7D       		.byte	(.L5-.L7)/2
 115 008f 2D       		.byte	(.L9-.L7)/2
 116 0090 7D       		.byte	(.L5-.L7)/2
 117 0091 7D       		.byte	(.L5-.L7)/2
 118 0092 7D       		.byte	(.L5-.L7)/2
 119 0093 4C       		.byte	(.L10-.L7)/2
 120              		.p2align 1
 121              	.L6:
 246:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****         {
 247:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             /* Address written from Master to Slave. */
 248:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             case EZI2C_1_SM_DEV1_WR_ADDR:
 249:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 250:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* If 8-bit interface, Advance to WR_Data, else to ADDR2 */
 251:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 #if (EZI2C_1_SUBADDR_WIDTH == EZI2C_1_SUBADDR_8BIT)
 252:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     tmp8 = EZI2C_1_DATA_REG;
 253:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     if (tmp8 < EZI2C_1_bufSizeS1)
 254:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     {
 255:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* ACK and ready to receive data */
 256:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_CSR_REG = EZI2C_1_CSR_ACK;
 257:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 258:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Set offset to new value */
 259:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_rwOffsetS1 = tmp8;
 260:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 261:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Reset index to offset value */
 262:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_rwIndexS1 = tmp8;
 263:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 264:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Prepare for write transaction */
 265:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_curState = EZI2C_1_SM_DEV1_WR_DATA;
 266:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     }
 267:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     else    /* Out of range, NAK data and don't set offset */
 268:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     {
 269:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* NAK master */
 270:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_CSR_REG = EZI2C_1_CSR_NAK;
 271:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     }
 272:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 273:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 #else   /* 16-bit */
 274:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Save MSB of address */
 275:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     tmp16 = EZI2C_1_DATA_REG;
 122              		.loc 1 275 0
 123 0094 4C4B     		ldr	r3, .L16+8
 124 0096 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 8


 125 0098 4A4B     		ldr	r3, .L16+4
 126 009a 5A80     		strh	r2, [r3, #2]	@ movhi
 276:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 277:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* ACK and ready to receive address */
 278:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_CSR_REG = EZI2C_1_CSR_ACK;
 127              		.loc 1 278 0
 128 009c 1022     		movs	r2, #16
 129 009e 484B     		ldr	r3, .L16
 130 00a0 1A70     		strb	r2, [r3]
 279:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 280:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Prepare to get LSB of address */
 281:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_curState = EZI2C_1_SM_DEV1_WR_ADDR_LSB;
 131              		.loc 1 281 0
 132 00a2 0222     		movs	r2, #2
 133 00a4 4D4B     		ldr	r3, .L16+28
 134 00a6 1A70     		strb	r2, [r3]
 282:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 283:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 #endif  /* (EZI2C_1_SUBADDR_WIDTH == EZI2C_1_SUBADDR_8BIT) */
 284:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 285:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             break;  /* case EZI2C_1_SM_DEV1_WR_ADDR */
 135              		.loc 1 285 0
 136 00a8 76E0     		b	.L4
 137              	.L8:
 286:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 287:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             #if (EZI2C_1_SUBADDR_WIDTH == EZI2C_1_SUBADDR_16BIT)
 288:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 289:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Only used with 16-bit interface */
 290:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 case EZI2C_1_SM_DEV1_WR_ADDR_LSB:
 291:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 292:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Create offset */
 293:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     tmp16 = (uint16) (tmp16 << EZI2C_1_ADDRESS_LSB_SHIFT) | EZI2C_1_DATA_REG;
 138              		.loc 1 293 0
 139 00aa 464A     		ldr	r2, .L16+4
 140 00ac 5388     		ldrh	r3, [r2, #2]
 141 00ae 1B02     		lsls	r3, r3, #8
 142 00b0 9BB2     		uxth	r3, r3
 143 00b2 4549     		ldr	r1, .L16+8
 144 00b4 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 145 00b6 0B43     		orrs	r3, r3, r1
 146 00b8 5380     		strh	r3, [r2, #2]	@ movhi
 294:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 295:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Check range */
 296:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     if(tmp16 < EZI2C_1_bufSizeS1)
 147              		.loc 1 296 0
 148 00ba 4A4A     		ldr	r2, .L16+36
 149 00bc 1288     		ldrh	r2, [r2]
 150 00be 92B2     		uxth	r2, r2
 151 00c0 9342     		cmp	r3, r2
 152 00c2 0CD2     		bcs	.L11
 297:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     {
 298:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* ACK and ready to receive address */
 299:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_CSR_REG = EZI2C_1_CSR_ACK;
 153              		.loc 1 299 0
 154 00c4 1022     		movs	r2, #16
 155 00c6 3E4B     		ldr	r3, .L16
 156 00c8 1A70     		strb	r2, [r3]
 300:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 9


 301:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Set offset to new value */
 302:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_rwOffsetS1 = tmp16;
 157              		.loc 1 302 0
 158 00ca 3E4B     		ldr	r3, .L16+4
 159 00cc 5B88     		ldrh	r3, [r3, #2]
 160 00ce 3F4A     		ldr	r2, .L16+12
 161 00d0 1380     		strh	r3, [r2]	@ movhi
 303:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 304:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Reset index to offset value */
 305:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_rwIndexS1 = tmp16;
 162              		.loc 1 305 0
 163 00d2 404A     		ldr	r2, .L16+20
 164 00d4 1380     		strh	r3, [r2]	@ movhi
 306:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 307:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Prepare for write transaction */
 308:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_curState = EZI2C_1_SM_DEV1_WR_DATA;
 165              		.loc 1 308 0
 166 00d6 0422     		movs	r2, #4
 167 00d8 404B     		ldr	r3, .L16+28
 168 00da 1A70     		strb	r2, [r3]
 169 00dc 5CE0     		b	.L4
 170              	.L11:
 309:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     }
 310:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     else    /* Out of range, NAK data and don't set offset */
 311:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     {
 312:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* NAK master */
 313:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_CSR_REG = EZI2C_1_CSR_NAK;
 171              		.loc 1 313 0
 172 00de 0022     		movs	r2, #0
 173 00e0 374B     		ldr	r3, .L16
 174 00e2 1A70     		strb	r2, [r3]
 175 00e4 58E0     		b	.L4
 176              	.L9:
 314:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     }
 315:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 break; /* case EZI2C_1_SM_DEV1_WR_ADDR_LSB */
 316:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 317:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             #endif  /* (EZI2C_1_SUBADDR_WIDTH == EZI2C_1_SUBADDR_16BIT) */
 318:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 319:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 320:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             /* Data written from master to slave. */
 321:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             case EZI2C_1_SM_DEV1_WR_DATA:
 322:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 323:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Check for valid range */
 324:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 if (EZI2C_1_rwIndexS1 < EZI2C_1_wrProtectS1)
 177              		.loc 1 324 0
 178 00e6 3B4B     		ldr	r3, .L16+20
 179 00e8 1A88     		ldrh	r2, [r3]
 180 00ea 92B2     		uxth	r2, r2
 181 00ec 3E4B     		ldr	r3, .L16+40
 182 00ee 1B88     		ldrh	r3, [r3]
 183 00f0 9BB2     		uxth	r3, r3
 184 00f2 9A42     		cmp	r2, r3
 185 00f4 12D2     		bcs	.L12
 325:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 {
 326:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Get data, to ACK quickly */
 327:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     tmp8 = EZI2C_1_DATA_REG;
 186              		.loc 1 327 0
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 10


 187 00f6 344B     		ldr	r3, .L16+8
 188 00f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 189 00fa 3249     		ldr	r1, .L16+4
 190 00fc 0B71     		strb	r3, [r1, #4]
 328:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 329:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* ACK and ready to receive sub address */
 330:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_CSR_REG = EZI2C_1_CSR_ACK;
 191              		.loc 1 330 0
 192 00fe 1022     		movs	r2, #16
 193 0100 2F4B     		ldr	r3, .L16
 194 0102 1A70     		strb	r2, [r3]
 331:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 332:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Write data to array */
 333:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_dataPtrS1[EZI2C_1_rwIndexS1] = tmp8;
 195              		.loc 1 333 0
 196 0104 334A     		ldr	r2, .L16+20
 197 0106 1388     		ldrh	r3, [r2]
 198 0108 9BB2     		uxth	r3, r3
 199 010a 3148     		ldr	r0, .L16+16
 200 010c 0068     		ldr	r0, [r0]
 201 010e 0979     		ldrb	r1, [r1, #4]	@ zero_extendqisi2
 202 0110 C154     		strb	r1, [r0, r3]
 334:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 335:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Increment pointer */
 336:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_rwIndexS1++;
 203              		.loc 1 336 0
 204 0112 1388     		ldrh	r3, [r2]
 205 0114 0133     		adds	r3, r3, #1
 206 0116 9BB2     		uxth	r3, r3
 207 0118 1380     		strh	r3, [r2]	@ movhi
 208 011a 3DE0     		b	.L4
 209              	.L12:
 337:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 }
 338:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 else
 339:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 {
 340:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* NAK cause beyond write area */
 341:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_CSR_REG = EZI2C_1_CSR_NAK;
 210              		.loc 1 341 0
 211 011c 0022     		movs	r2, #0
 212 011e 284B     		ldr	r3, .L16
 213 0120 1A70     		strb	r2, [r3]
 214 0122 39E0     		b	.L4
 215              	.L10:
 342:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 }
 343:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             break;  /* EZI2C_1_SM_DEV1_WR_DATA */
 344:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 345:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 346:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             /* Data read by master from slave */
 347:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             case EZI2C_1_SM_DEV1_RD_DATA:
 348:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 349:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Check ACK/NAK */
 350:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 if ((tmpCsr & EZI2C_1_CSR_LRB) == EZI2C_1_CSR_LRB_ACK)
 216              		.loc 1 350 0
 217 0124 13F0020F 		tst	r3, #2
 218 0128 1FD1     		bne	.L13
 351:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 {
 352:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Check for valid range */
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 11


 353:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     if (EZI2C_1_rwIndexS1 < EZI2C_1_bufSizeS1)
 219              		.loc 1 353 0
 220 012a 2A4B     		ldr	r3, .L16+20
 221 012c 1A88     		ldrh	r2, [r3]
 222 012e 92B2     		uxth	r2, r2
 223 0130 2C4B     		ldr	r3, .L16+36
 224 0132 1B88     		ldrh	r3, [r3]
 225 0134 9BB2     		uxth	r3, r3
 226 0136 9A42     		cmp	r2, r3
 227 0138 10D2     		bcs	.L14
 354:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     {
 355:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Get data from array */
 356:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_DATA_REG = EZI2C_1_dataPtrS1[EZI2C_1_rwIndexS1];
 228              		.loc 1 356 0
 229 013a 264A     		ldr	r2, .L16+20
 230 013c 1388     		ldrh	r3, [r2]
 231 013e 9BB2     		uxth	r3, r3
 232 0140 2349     		ldr	r1, .L16+16
 233 0142 0968     		ldr	r1, [r1]
 234 0144 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 235 0146 DBB2     		uxtb	r3, r3
 236 0148 1F49     		ldr	r1, .L16+8
 237 014a 0B70     		strb	r3, [r1]
 357:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 358:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Send Data */
 359:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_CSR_REG = EZI2C_1_CSR_TRANSMIT;
 238              		.loc 1 359 0
 239 014c 0421     		movs	r1, #4
 240 014e 1C4B     		ldr	r3, .L16
 241 0150 1970     		strb	r1, [r3]
 360:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 361:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Increment pointer */
 362:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         ++EZI2C_1_rwIndexS1;
 242              		.loc 1 362 0
 243 0152 1388     		ldrh	r3, [r2]
 244 0154 0133     		adds	r3, r3, #1
 245 0156 9BB2     		uxth	r3, r3
 246 0158 1380     		strh	r3, [r2]	@ movhi
 247 015a 1DE0     		b	.L4
 248              	.L14:
 363:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     }
 364:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     else    /* No valid range */
 365:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     {
 366:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Out of range send FFs */
 367:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_DATA_REG = EZI2C_1_DUMMY_DATA;
 249              		.loc 1 367 0
 250 015c FF22     		movs	r2, #255
 251 015e 1A4B     		ldr	r3, .L16+8
 252 0160 1A70     		strb	r2, [r3]
 368:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 369:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Send Data */
 370:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_CSR_REG = EZI2C_1_CSR_TRANSMIT;
 253              		.loc 1 370 0
 254 0162 0422     		movs	r2, #4
 255 0164 013B     		subs	r3, r3, #1
 256 0166 1A70     		strb	r2, [r3]
 257 0168 16E0     		b	.L4
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 12


 258              	.L13:
 371:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     }
 372:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 }
 373:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 else    /* Data was NAKed */
 374:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 {
 375:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Send dummy data at the end of read transaction */
 376:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_DATA_REG = EZI2C_1_DUMMY_DATA;
 259              		.loc 1 376 0
 260 016a FF22     		movs	r2, #255
 261 016c 164B     		ldr	r3, .L16+8
 262 016e 1A70     		strb	r2, [r3]
 377:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 378:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Clear transmit bit at the end of read transaction */
 379:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_CSR_REG = EZI2C_1_CSR_NAK;
 263              		.loc 1 379 0
 264 0170 0022     		movs	r2, #0
 265 0172 013B     		subs	r3, r3, #1
 266 0174 1A70     		strb	r2, [r3]
 380:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 381:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Clear Busy Flag */
 382:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_curStatus &= ((uint8) ~EZI2C_1_STATUS_BUSY);
 267              		.loc 1 382 0
 268 0176 1849     		ldr	r1, .L16+24
 269 0178 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 270 017a 03F0EF03 		and	r3, r3, #239
 271 017e 0B70     		strb	r3, [r1]
 383:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 384:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Error or Stop, reset state */
 385:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     EZI2C_1_curState = EZI2C_1_SM_IDLE;
 272              		.loc 1 385 0
 273 0180 164B     		ldr	r3, .L16+28
 274 0182 1A70     		strb	r2, [r3]
 275 0184 08E0     		b	.L4
 276              	.L5:
 386:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 387:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 }
 388:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             break;  /* EZI2C_1_SM_DEV1_RD_DATA */
 389:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 390:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             /* Second Device Address */
 391:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             #if (EZI2C_1_ADDRESSES == EZI2C_1_TWO_ADDRESSES)
 392:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 393:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 case EZI2C_1_SM_DEV2_WR_ADDR:
 394:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 395:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* If 8-bit interface, Advance to WR_Data, else to ADDR2 */
 396:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     #if (EZI2C_1_SUBADDR_WIDTH == EZI2C_1_SUBADDR_8BIT)
 397:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 398:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         tmp8 = EZI2C_1_DATA_REG;
 399:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         if (tmp8 < EZI2C_1_bufSizeS2)
 400:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         {
 401:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* ACK and ready to receive address */
 402:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             EZI2C_1_CSR_REG = EZI2C_1_CSR_ACK;
 403:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 404:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* Set offset to new value */
 405:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             EZI2C_1_rwOffsetS2 = tmp8;
 406:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 407:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* Reset index to offset value */
 408:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             EZI2C_1_rwIndexS2 = tmp8;
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 13


 409:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 410:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* Prepare for write transaction */
 411:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             EZI2C_1_curState = EZI2C_1_SM_DEV2_WR_DATA;
 412:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         }
 413:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         else    /* Out of range, NAK data and don't set offset */
 414:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         {
 415:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* NAK master */
 416:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             EZI2C_1_CSR_REG = EZI2C_1_CSR_NAK;
 417:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         }
 418:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     #else
 419:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Save LSB of address */
 420:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         tmp16 = EZI2C_1_DATA_REG;
 421:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 422:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* ACK and ready to receive address */
 423:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_CSR_REG = EZI2C_1_CSR_ACK;
 424:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 425:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Prepare to get LSB of address */
 426:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_curState = EZI2C_1_SM_DEV2_WR_ADDR_LSB;
 427:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     #endif  /* (EZI2C_1_SUBADDR_WIDTH == EZI2C_1_SUBADDR_8BIT) */
 428:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 429:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 break;  /* EZI2C_1_SM_DEV2_WR_ADDR */
 430:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 431:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 #if (EZI2C_1_SUBADDR_WIDTH == EZI2C_1_SUBADDR_16BIT)
 432:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 433:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Only used with 16-bit interface */
 434:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     case EZI2C_1_SM_DEV2_WR_ADDR_LSB:
 435:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Create offset */
 436:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         tmp16 = (uint16) (tmp16 << 8u) | EZI2C_1_DATA_REG;
 437:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         if (tmp16 < EZI2C_1_bufSizeS2)
 438:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         {
 439:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* ACK and ready to receive address */
 440:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             EZI2C_1_CSR_REG = EZI2C_1_CSR_ACK;
 441:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 442:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* Set offset to new value */
 443:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             EZI2C_1_rwOffsetS2 = tmp16;
 444:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 445:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* Reset index to offset value */
 446:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             EZI2C_1_rwIndexS2 = tmp16;
 447:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 448:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* Prepare for write transaction */
 449:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             EZI2C_1_curState = EZI2C_1_SM_DEV2_WR_DATA;
 450:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         }
 451:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         else    /* Out of range, NAK data and don't set offset */
 452:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         {
 453:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* NAK master */
 454:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             EZI2C_1_CSR_REG = EZI2C_1_CSR_NAK;
 455:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         }
 456:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         break; /* EZI2C_1_SM_DEV2_WR_ADDR_LSB */
 457:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 458:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 #endif   /* (EZI2C_1_SUBADDR_WIDTH == EZI2C_1_SUBADDR_16BIT) */
 459:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 460:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 461:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Data written from master to slave. */
 462:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 case EZI2C_1_SM_DEV2_WR_DATA:
 463:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 464:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Check for valid range */
 465:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     if (EZI2C_1_rwIndexS2 < EZI2C_1_wrProtectS2)
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 14


 466:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     {
 467:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Get data, to ACK quickly */
 468:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         tmp8 = EZI2C_1_DATA_REG;
 469:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 470:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* ACK and ready to receive sub address */
 471:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_CSR_REG = EZI2C_1_CSR_ACK;
 472:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 473:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Write data to array */
 474:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_dataPtrS2[EZI2C_1_rwIndexS2] = tmp8;
 475:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 476:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* Inc pointer */
 477:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         ++EZI2C_1_rwIndexS2;
 478:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     }
 479:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     else
 480:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     {
 481:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         /* NAK cause beyond write area */
 482:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         EZI2C_1_CSR_REG = EZI2C_1_CSR_NAK;
 483:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     }
 484:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     break;  /* EZI2C_1_SM_DEV2_WR_DATA */
 485:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 486:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     /* Data read by master from slave */
 487:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                     case EZI2C_1_SM_DEV2_RD_DATA:
 488:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 489:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         if ((tmpCsr & EZI2C_1_CSR_LRB) == EZI2C_1_CSR_LRB_ACK)
 490:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         {   /* ACKed */
 491:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* Check for valid range */
 492:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             if (EZI2C_1_rwIndexS2 < EZI2C_1_bufSizeS2)
 493:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             {   /* Check ACK/NAK */
 494:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                                 /* Get data from array */
 495:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                                 EZI2C_1_DATA_REG = EZI2C_1_dataPtrS2[EZI2C_1_rwIndexS2];
 496:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 497:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                                 /* Send Data */
 498:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                                 EZI2C_1_CSR_REG = EZI2C_1_CSR_TRANSMIT;
 499:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 500:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                                 /* Increment pointer */
 501:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                                 EZI2C_1_rwIndexS2++;
 502:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             }
 503:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             else    /* Not valid range */
 504:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             {
 505:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                                 /* Out of range send FFs */
 506:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                                 EZI2C_1_DATA_REG = EZI2C_1_DUMMY_DATA;
 507:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 508:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                                 /* Send Data */
 509:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                                 EZI2C_1_CSR_REG = EZI2C_1_CSR_TRANSMIT;
 510:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             }
 511:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         }
 512:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         else    /* NAKed */
 513:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         {
 514:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* Out of range send FFs */
 515:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             EZI2C_1_DATA_REG = EZI2C_1_DUMMY_DATA;
 516:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 517:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* Send Data */
 518:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             EZI2C_1_CSR_REG = EZI2C_1_CSR_TRANSMIT;
 519:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 520:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* Clear busy status */
 521:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             EZI2C_1_curStatus &= ((uint8) ~EZI2C_1_STATUS_BUSY);
 522:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 15


 523:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             /* Error or Stop, reset state */
 524:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                             EZI2C_1_curState = EZI2C_1_SM_IDLE;
 525:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         }   /* End if ACK/NAK */
 526:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 527:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                         break;  /* EZI2C_1_SM_DEV2_RD_DATA */
 528:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 529:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             #endif  /* (EZI2C_1_ADDRESSES == EZI2C_1_TWO_ADDRESSES) */
 530:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 531:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****             default:
 532:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Invalid state, reset state to idle */
 533:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 EZI2C_1_curState = EZI2C_1_SM_IDLE;
 277              		.loc 1 533 0
 278 0186 0023     		movs	r3, #0
 279 0188 144A     		ldr	r2, .L16+28
 280 018a 1370     		strb	r3, [r2]
 534:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 535:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Reset offsets and index */
 536:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 EZI2C_1_rwOffsetS1 = 0u;
 281              		.loc 1 536 0
 282 018c 0F4A     		ldr	r2, .L16+12
 283 018e 1380     		strh	r3, [r2]	@ movhi
 537:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 EZI2C_1_rwIndexS1  = 0u;
 284              		.loc 1 537 0
 285 0190 104A     		ldr	r2, .L16+20
 286 0192 1380     		strh	r3, [r2]	@ movhi
 538:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 539:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 /* Dummy NAK to release bus */
 540:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 EZI2C_1_CSR_REG = EZI2C_1_CSR_NAK;
 287              		.loc 1 540 0
 288 0194 0A4A     		ldr	r2, .L16
 289 0196 1370     		strb	r3, [r2]
 290              	.L4:
 541:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****                 break;
 542:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 543:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****         }  /* End switch/case EZI2C_1_curState */
 544:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     }
 545:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     else
 546:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     {
 547:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****         /* Intentional blank line */
 548:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     }
 549:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 550:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     /* Check if Stop was detected */
 551:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     if (EZI2C_1_IS_BIT_SET(EZI2C_1_CSR_REG, EZI2C_1_CSR_STOP_STATUS))
 291              		.loc 1 551 0
 292 0198 094B     		ldr	r3, .L16
 293 019a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 294 019c 13F0200F 		tst	r3, #32
 295 01a0 0CD0     		beq	.L1
 552:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****     {
 553:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****         /* Clear Busy flag */
 554:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****         EZI2C_1_curStatus &= ((uint8) ~EZI2C_1_STATUS_BUSY);
 296              		.loc 1 554 0
 297 01a2 0D4A     		ldr	r2, .L16+24
 298 01a4 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 299 01a6 03F0EF03 		and	r3, r3, #239
 300 01aa 1370     		strb	r3, [r2]
 555:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 16


 556:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****         /* error or stop - reset state */
 557:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****         EZI2C_1_curState = EZI2C_1_SM_IDLE;
 301              		.loc 1 557 0
 302 01ac 0022     		movs	r2, #0
 303 01ae 0B4B     		ldr	r3, .L16+28
 304 01b0 1A70     		strb	r2, [r3]
 558:.\Generated_Source\PSoC5/EZI2C_1_INT.c **** 
 559:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****         /* Disable interrupt on Stop */
 560:.\Generated_Source\PSoC5/EZI2C_1_INT.c ****         EZI2C_1_CFG_REG &= ((uint8) ~EZI2C_1_CFG_STOP_IE);
 305              		.loc 1 560 0
 306 01b2 0B4A     		ldr	r2, .L16+32
 307 01b4 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 308 01b6 03F0EF03 		and	r3, r3, #239
 309 01ba 1370     		strb	r3, [r2]
 310              	.L1:
 311 01bc 7047     		bx	lr
 312              	.L17:
 313 01be 00BF     		.align	2
 314              	.L16:
 315 01c0 D7490040 		.word	1073760727
 316 01c4 00000000 		.word	.LANCHOR0
 317 01c8 D8490040 		.word	1073760728
 318 01cc 00000000 		.word	EZI2C_1_rwOffsetS1
 319 01d0 00000000 		.word	EZI2C_1_dataPtrS1
 320 01d4 00000000 		.word	EZI2C_1_rwIndexS1
 321 01d8 00000000 		.word	EZI2C_1_curStatus
 322 01dc 00000000 		.word	EZI2C_1_curState
 323 01e0 D6490040 		.word	1073760726
 324 01e4 00000000 		.word	EZI2C_1_bufSizeS1
 325 01e8 00000000 		.word	EZI2C_1_wrProtectS1
 326              		.cfi_endproc
 327              	.LFE0:
 328              		.size	EZI2C_1_ISR, .-EZI2C_1_ISR
 329              		.bss
 330              		.align	1
 331              		.set	.LANCHOR0,. + 0
 332              		.type	tmpCsr.4850, %object
 333              		.size	tmpCsr.4850, 1
 334              	tmpCsr.4850:
 335 0000 00       		.space	1
 336 0001 00       		.space	1
 337              		.type	tmp16.4851, %object
 338              		.size	tmp16.4851, 2
 339              	tmp16.4851:
 340 0002 0000     		.space	2
 341              		.type	tmp8.4849, %object
 342              		.size	tmp8.4849, 1
 343              	tmp8.4849:
 344 0004 00       		.space	1
 345 0005 00       		.text
 346              	.Letext0:
 347              		.file 2 ".\\Generated_Source\\PSoC5\\cytypes.h"
 348              		.file 3 ".\\Generated_Source\\PSoC5\\EZI2C_1_PVT.h"
 349              		.section	.debug_info,"",%progbits
 350              	.Ldebug_info0:
 351 0000 4E010000 		.4byte	0x14e
 352 0004 0400     		.2byte	0x4
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 17


 353 0006 00000000 		.4byte	.Ldebug_abbrev0
 354 000a 04       		.byte	0x4
 355 000b 01       		.uleb128 0x1
 356 000c 39010000 		.4byte	.LASF26
 357 0010 01       		.byte	0x1
 358 0011 44000000 		.4byte	.LASF27
 359 0015 D2000000 		.4byte	.LASF28
 360 0019 00000000 		.4byte	.Ldebug_ranges0+0
 361 001d 00000000 		.4byte	0
 362 0021 00000000 		.4byte	.Ldebug_line0
 363 0025 02       		.uleb128 0x2
 364 0026 01       		.byte	0x1
 365 0027 06       		.byte	0x6
 366 0028 3F020000 		.4byte	.LASF0
 367 002c 02       		.uleb128 0x2
 368 002d 01       		.byte	0x1
 369 002e 08       		.byte	0x8
 370 002f 95000000 		.4byte	.LASF1
 371 0033 02       		.uleb128 0x2
 372 0034 02       		.byte	0x2
 373 0035 05       		.byte	0x5
 374 0036 2C020000 		.4byte	.LASF2
 375 003a 02       		.uleb128 0x2
 376 003b 02       		.byte	0x2
 377 003c 07       		.byte	0x7
 378 003d 77000000 		.4byte	.LASF3
 379 0041 02       		.uleb128 0x2
 380 0042 04       		.byte	0x4
 381 0043 05       		.byte	0x5
 382 0044 36020000 		.4byte	.LASF4
 383 0048 02       		.uleb128 0x2
 384 0049 04       		.byte	0x4
 385 004a 07       		.byte	0x7
 386 004b BA000000 		.4byte	.LASF5
 387 004f 02       		.uleb128 0x2
 388 0050 08       		.byte	0x8
 389 0051 05       		.byte	0x5
 390 0052 F4010000 		.4byte	.LASF6
 391 0056 02       		.uleb128 0x2
 392 0057 08       		.byte	0x8
 393 0058 07       		.byte	0x7
 394 0059 D4010000 		.4byte	.LASF7
 395 005d 03       		.uleb128 0x3
 396 005e 04       		.byte	0x4
 397 005f 05       		.byte	0x5
 398 0060 696E7400 		.ascii	"int\000"
 399 0064 02       		.uleb128 0x2
 400 0065 04       		.byte	0x4
 401 0066 07       		.byte	0x7
 402 0067 C7010000 		.4byte	.LASF8
 403 006b 04       		.uleb128 0x4
 404 006c CC000000 		.4byte	.LASF9
 405 0070 02       		.byte	0x2
 406 0071 3801     		.2byte	0x138
 407 0073 2C000000 		.4byte	0x2c
 408 0077 04       		.uleb128 0x4
 409 0078 32010000 		.4byte	.LASF10
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 18


 410 007c 02       		.byte	0x2
 411 007d 3901     		.2byte	0x139
 412 007f 3A000000 		.4byte	0x3a
 413 0083 02       		.uleb128 0x2
 414 0084 04       		.byte	0x4
 415 0085 04       		.byte	0x4
 416 0086 8A000000 		.4byte	.LASF11
 417 008a 02       		.uleb128 0x2
 418 008b 08       		.byte	0x8
 419 008c 04       		.byte	0x4
 420 008d 19010000 		.4byte	.LASF12
 421 0091 02       		.uleb128 0x2
 422 0092 01       		.byte	0x1
 423 0093 08       		.byte	0x8
 424 0094 14020000 		.4byte	.LASF13
 425 0098 04       		.uleb128 0x4
 426 0099 B5000000 		.4byte	.LASF14
 427 009d 02       		.byte	0x2
 428 009e E201     		.2byte	0x1e2
 429 00a0 A4000000 		.4byte	0xa4
 430 00a4 05       		.uleb128 0x5
 431 00a5 6B000000 		.4byte	0x6b
 432 00a9 05       		.uleb128 0x5
 433 00aa 77000000 		.4byte	0x77
 434 00ae 02       		.uleb128 0x2
 435 00af 04       		.byte	0x4
 436 00b0 07       		.byte	0x7
 437 00b1 EB010000 		.4byte	.LASF15
 438 00b5 06       		.uleb128 0x6
 439 00b6 6B000000 		.4byte	.LASF29
 440 00ba 01       		.byte	0x1
 441 00bb 57       		.byte	0x57
 442 00bc 00000000 		.4byte	.LFB0
 443 00c0 EC010000 		.4byte	.LFE0-.LFB0
 444 00c4 01       		.uleb128 0x1
 445 00c5 9C       		.byte	0x9c
 446 00c6 FE000000 		.4byte	0xfe
 447 00ca 07       		.uleb128 0x7
 448 00cb 90000000 		.4byte	.LASF16
 449 00cf 01       		.byte	0x1
 450 00d0 59       		.byte	0x59
 451 00d1 6B000000 		.4byte	0x6b
 452 00d5 05       		.uleb128 0x5
 453 00d6 03       		.byte	0x3
 454 00d7 04000000 		.4byte	tmp8.4849
 455 00db 07       		.uleb128 0x7
 456 00dc 00000000 		.4byte	.LASF17
 457 00e0 01       		.byte	0x1
 458 00e1 5A       		.byte	0x5a
 459 00e2 6B000000 		.4byte	0x6b
 460 00e6 05       		.uleb128 0x5
 461 00e7 03       		.byte	0x3
 462 00e8 00000000 		.4byte	tmpCsr.4850
 463 00ec 07       		.uleb128 0x7
 464 00ed 3E000000 		.4byte	.LASF18
 465 00f1 01       		.byte	0x1
 466 00f2 5D       		.byte	0x5d
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 19


 467 00f3 77000000 		.4byte	0x77
 468 00f7 05       		.uleb128 0x5
 469 00f8 03       		.byte	0x3
 470 00f9 02000000 		.4byte	tmp16.4851
 471 00fd 00       		.byte	0
 472 00fe 08       		.uleb128 0x8
 473 00ff 20010000 		.4byte	.LASF19
 474 0103 03       		.byte	0x3
 475 0104 1D       		.byte	0x1d
 476 0105 A4000000 		.4byte	0xa4
 477 0109 08       		.uleb128 0x8
 478 010a 07000000 		.4byte	.LASF20
 479 010e 03       		.byte	0x3
 480 010f 1E       		.byte	0x1e
 481 0110 A4000000 		.4byte	0xa4
 482 0114 08       		.uleb128 0x8
 483 0115 A3000000 		.4byte	.LASF21
 484 0119 03       		.byte	0x3
 485 011a 21       		.byte	0x21
 486 011b 1F010000 		.4byte	0x11f
 487 011f 09       		.uleb128 0x9
 488 0120 04       		.byte	0x4
 489 0121 A4000000 		.4byte	0xa4
 490 0125 08       		.uleb128 0x8
 491 0126 2C000000 		.4byte	.LASF22
 492 012a 03       		.byte	0x3
 493 012b 22       		.byte	0x22
 494 012c A9000000 		.4byte	0xa9
 495 0130 08       		.uleb128 0x8
 496 0131 18000000 		.4byte	.LASF23
 497 0135 03       		.byte	0x3
 498 0136 23       		.byte	0x23
 499 0137 A9000000 		.4byte	0xa9
 500 013b 08       		.uleb128 0x8
 501 013c 19020000 		.4byte	.LASF24
 502 0140 03       		.byte	0x3
 503 0141 24       		.byte	0x24
 504 0142 A9000000 		.4byte	0xa9
 505 0146 08       		.uleb128 0x8
 506 0147 02020000 		.4byte	.LASF25
 507 014b 03       		.byte	0x3
 508 014c 25       		.byte	0x25
 509 014d A9000000 		.4byte	0xa9
 510 0151 00       		.byte	0
 511              		.section	.debug_abbrev,"",%progbits
 512              	.Ldebug_abbrev0:
 513 0000 01       		.uleb128 0x1
 514 0001 11       		.uleb128 0x11
 515 0002 01       		.byte	0x1
 516 0003 25       		.uleb128 0x25
 517 0004 0E       		.uleb128 0xe
 518 0005 13       		.uleb128 0x13
 519 0006 0B       		.uleb128 0xb
 520 0007 03       		.uleb128 0x3
 521 0008 0E       		.uleb128 0xe
 522 0009 1B       		.uleb128 0x1b
 523 000a 0E       		.uleb128 0xe
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 20


 524 000b 55       		.uleb128 0x55
 525 000c 17       		.uleb128 0x17
 526 000d 11       		.uleb128 0x11
 527 000e 01       		.uleb128 0x1
 528 000f 10       		.uleb128 0x10
 529 0010 17       		.uleb128 0x17
 530 0011 00       		.byte	0
 531 0012 00       		.byte	0
 532 0013 02       		.uleb128 0x2
 533 0014 24       		.uleb128 0x24
 534 0015 00       		.byte	0
 535 0016 0B       		.uleb128 0xb
 536 0017 0B       		.uleb128 0xb
 537 0018 3E       		.uleb128 0x3e
 538 0019 0B       		.uleb128 0xb
 539 001a 03       		.uleb128 0x3
 540 001b 0E       		.uleb128 0xe
 541 001c 00       		.byte	0
 542 001d 00       		.byte	0
 543 001e 03       		.uleb128 0x3
 544 001f 24       		.uleb128 0x24
 545 0020 00       		.byte	0
 546 0021 0B       		.uleb128 0xb
 547 0022 0B       		.uleb128 0xb
 548 0023 3E       		.uleb128 0x3e
 549 0024 0B       		.uleb128 0xb
 550 0025 03       		.uleb128 0x3
 551 0026 08       		.uleb128 0x8
 552 0027 00       		.byte	0
 553 0028 00       		.byte	0
 554 0029 04       		.uleb128 0x4
 555 002a 16       		.uleb128 0x16
 556 002b 00       		.byte	0
 557 002c 03       		.uleb128 0x3
 558 002d 0E       		.uleb128 0xe
 559 002e 3A       		.uleb128 0x3a
 560 002f 0B       		.uleb128 0xb
 561 0030 3B       		.uleb128 0x3b
 562 0031 05       		.uleb128 0x5
 563 0032 49       		.uleb128 0x49
 564 0033 13       		.uleb128 0x13
 565 0034 00       		.byte	0
 566 0035 00       		.byte	0
 567 0036 05       		.uleb128 0x5
 568 0037 35       		.uleb128 0x35
 569 0038 00       		.byte	0
 570 0039 49       		.uleb128 0x49
 571 003a 13       		.uleb128 0x13
 572 003b 00       		.byte	0
 573 003c 00       		.byte	0
 574 003d 06       		.uleb128 0x6
 575 003e 2E       		.uleb128 0x2e
 576 003f 01       		.byte	0x1
 577 0040 3F       		.uleb128 0x3f
 578 0041 19       		.uleb128 0x19
 579 0042 03       		.uleb128 0x3
 580 0043 0E       		.uleb128 0xe
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 21


 581 0044 3A       		.uleb128 0x3a
 582 0045 0B       		.uleb128 0xb
 583 0046 3B       		.uleb128 0x3b
 584 0047 0B       		.uleb128 0xb
 585 0048 27       		.uleb128 0x27
 586 0049 19       		.uleb128 0x19
 587 004a 11       		.uleb128 0x11
 588 004b 01       		.uleb128 0x1
 589 004c 12       		.uleb128 0x12
 590 004d 06       		.uleb128 0x6
 591 004e 40       		.uleb128 0x40
 592 004f 18       		.uleb128 0x18
 593 0050 9742     		.uleb128 0x2117
 594 0052 19       		.uleb128 0x19
 595 0053 01       		.uleb128 0x1
 596 0054 13       		.uleb128 0x13
 597 0055 00       		.byte	0
 598 0056 00       		.byte	0
 599 0057 07       		.uleb128 0x7
 600 0058 34       		.uleb128 0x34
 601 0059 00       		.byte	0
 602 005a 03       		.uleb128 0x3
 603 005b 0E       		.uleb128 0xe
 604 005c 3A       		.uleb128 0x3a
 605 005d 0B       		.uleb128 0xb
 606 005e 3B       		.uleb128 0x3b
 607 005f 0B       		.uleb128 0xb
 608 0060 49       		.uleb128 0x49
 609 0061 13       		.uleb128 0x13
 610 0062 02       		.uleb128 0x2
 611 0063 18       		.uleb128 0x18
 612 0064 00       		.byte	0
 613 0065 00       		.byte	0
 614 0066 08       		.uleb128 0x8
 615 0067 34       		.uleb128 0x34
 616 0068 00       		.byte	0
 617 0069 03       		.uleb128 0x3
 618 006a 0E       		.uleb128 0xe
 619 006b 3A       		.uleb128 0x3a
 620 006c 0B       		.uleb128 0xb
 621 006d 3B       		.uleb128 0x3b
 622 006e 0B       		.uleb128 0xb
 623 006f 49       		.uleb128 0x49
 624 0070 13       		.uleb128 0x13
 625 0071 3F       		.uleb128 0x3f
 626 0072 19       		.uleb128 0x19
 627 0073 3C       		.uleb128 0x3c
 628 0074 19       		.uleb128 0x19
 629 0075 00       		.byte	0
 630 0076 00       		.byte	0
 631 0077 09       		.uleb128 0x9
 632 0078 0F       		.uleb128 0xf
 633 0079 00       		.byte	0
 634 007a 0B       		.uleb128 0xb
 635 007b 0B       		.uleb128 0xb
 636 007c 49       		.uleb128 0x49
 637 007d 13       		.uleb128 0x13
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 22


 638 007e 00       		.byte	0
 639 007f 00       		.byte	0
 640 0080 00       		.byte	0
 641              		.section	.debug_aranges,"",%progbits
 642 0000 1C000000 		.4byte	0x1c
 643 0004 0200     		.2byte	0x2
 644 0006 00000000 		.4byte	.Ldebug_info0
 645 000a 04       		.byte	0x4
 646 000b 00       		.byte	0
 647 000c 0000     		.2byte	0
 648 000e 0000     		.2byte	0
 649 0010 00000000 		.4byte	.LFB0
 650 0014 EC010000 		.4byte	.LFE0-.LFB0
 651 0018 00000000 		.4byte	0
 652 001c 00000000 		.4byte	0
 653              		.section	.debug_ranges,"",%progbits
 654              	.Ldebug_ranges0:
 655 0000 00000000 		.4byte	.LFB0
 656 0004 EC010000 		.4byte	.LFE0
 657 0008 00000000 		.4byte	0
 658 000c 00000000 		.4byte	0
 659              		.section	.debug_line,"",%progbits
 660              	.Ldebug_line0:
 661 0000 B4000000 		.section	.debug_str,"MS",%progbits,1
 661      02005B00 
 661      00000201 
 661      FB0E0D00 
 661      01010101 
 662              	.LASF17:
 663 0000 746D7043 		.ascii	"tmpCsr\000"
 663      737200
 664              	.LASF20:
 665 0007 455A4932 		.ascii	"EZI2C_1_curState\000"
 665      435F315F 
 665      63757253 
 665      74617465 
 665      00
 666              	.LASF23:
 667 0018 455A4932 		.ascii	"EZI2C_1_wrProtectS1\000"
 667      435F315F 
 667      77725072 
 667      6F746563 
 667      74533100 
 668              	.LASF22:
 669 002c 455A4932 		.ascii	"EZI2C_1_bufSizeS1\000"
 669      435F315F 
 669      62756653 
 669      697A6553 
 669      3100
 670              	.LASF18:
 671 003e 746D7031 		.ascii	"tmp16\000"
 671      3600
 672              	.LASF27:
 673 0044 2E5C4765 		.ascii	".\\Generated_Source\\PSoC5\\EZI2C_1_INT.c\000"
 673      6E657261 
 673      7465645F 
 673      536F7572 
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 23


 673      63655C50 
 674              	.LASF29:
 675 006b 455A4932 		.ascii	"EZI2C_1_ISR\000"
 675      435F315F 
 675      49535200 
 676              	.LASF3:
 677 0077 73686F72 		.ascii	"short unsigned int\000"
 677      7420756E 
 677      7369676E 
 677      65642069 
 677      6E7400
 678              	.LASF11:
 679 008a 666C6F61 		.ascii	"float\000"
 679      7400
 680              	.LASF16:
 681 0090 746D7038 		.ascii	"tmp8\000"
 681      00
 682              	.LASF1:
 683 0095 756E7369 		.ascii	"unsigned char\000"
 683      676E6564 
 683      20636861 
 683      7200
 684              	.LASF21:
 685 00a3 455A4932 		.ascii	"EZI2C_1_dataPtrS1\000"
 685      435F315F 
 685      64617461 
 685      50747253 
 685      3100
 686              	.LASF14:
 687 00b5 72656738 		.ascii	"reg8\000"
 687      00
 688              	.LASF5:
 689 00ba 6C6F6E67 		.ascii	"long unsigned int\000"
 689      20756E73 
 689      69676E65 
 689      6420696E 
 689      7400
 690              	.LASF9:
 691 00cc 75696E74 		.ascii	"uint8\000"
 691      3800
 692              	.LASF28:
 693 00d2 443A5C55 		.ascii	"D:\\Utilisateurs\\user\\Documents\\PSoC Creator\\Wo"
 693      74696C69 
 693      73617465 
 693      7572735C 
 693      75736572 
 694 0100 726B7370 		.ascii	"rkspace02\\Capsense.cydsn\000"
 694      61636530 
 694      325C4361 
 694      7073656E 
 694      73652E63 
 695              	.LASF12:
 696 0119 646F7562 		.ascii	"double\000"
 696      6C6500
 697              	.LASF19:
 698 0120 455A4932 		.ascii	"EZI2C_1_curStatus\000"
 698      435F315F 
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 24


 698      63757253 
 698      74617475 
 698      7300
 699              	.LASF10:
 700 0132 75696E74 		.ascii	"uint16\000"
 700      313600
 701              	.LASF26:
 702 0139 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 702      4320342E 
 702      392E3320 
 702      32303135 
 702      30333033 
 703 016c 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 703      20726576 
 703      6973696F 
 703      6E203232 
 703      31323230 
 704 019f 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 704      66756E63 
 704      74696F6E 
 704      2D736563 
 704      74696F6E 
 705              	.LASF8:
 706 01c7 756E7369 		.ascii	"unsigned int\000"
 706      676E6564 
 706      20696E74 
 706      00
 707              	.LASF7:
 708 01d4 6C6F6E67 		.ascii	"long long unsigned int\000"
 708      206C6F6E 
 708      6720756E 
 708      7369676E 
 708      65642069 
 709              	.LASF15:
 710 01eb 73697A65 		.ascii	"sizetype\000"
 710      74797065 
 710      00
 711              	.LASF6:
 712 01f4 6C6F6E67 		.ascii	"long long int\000"
 712      206C6F6E 
 712      6720696E 
 712      7400
 713              	.LASF25:
 714 0202 455A4932 		.ascii	"EZI2C_1_rwIndexS1\000"
 714      435F315F 
 714      7277496E 
 714      64657853 
 714      3100
 715              	.LASF13:
 716 0214 63686172 		.ascii	"char\000"
 716      00
 717              	.LASF24:
 718 0219 455A4932 		.ascii	"EZI2C_1_rwOffsetS1\000"
 718      435F315F 
 718      72774F66 
 718      66736574 
 718      533100
ARM GAS  C:\Users\user\AppData\Local\Temp\ccTWj9Ub.s 			page 25


 719              	.LASF2:
 720 022c 73686F72 		.ascii	"short int\000"
 720      7420696E 
 720      7400
 721              	.LASF4:
 722 0236 6C6F6E67 		.ascii	"long int\000"
 722      20696E74 
 722      00
 723              	.LASF0:
 724 023f 7369676E 		.ascii	"signed char\000"
 724      65642063 
 724      68617200 
 725              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
